buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'maven-publish'
}

apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
file_version =  minecraft_version + "-" + file_version + "-" + mod_version
version = file_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name 'Curse Maven'
        url "https://www.cursemaven.com"
    }

    maven {
        name 'IzzelAliz Maven'
        url 'https://maven.izzel.io/releases/'
    }

    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
    maven {url "https://maven.mohistmc.com/"}

}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    // Modern UI core framework
    minecraftLibrary("icyllis.modernui:ModernUI-Core:${modernui_core_version}") {
        exclude group: "org.apache.logging.log4j", module: "log4j-core"
        exclude group: "org.apache.logging.log4j", module: "log4j-api"
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j2-impl'
        exclude group: "com.google.code.findbugs", module: "jsr305"
        exclude group: "org.jetbrains", module: "annotations"
        exclude group: "com.ibm.icu", module: "icu4j"
        exclude group: "it.unimi.dsi", module: "fastutil"
    }
    minecraftLibrary("icyllis.modernui:ModernUI-Markdown:${modernui_core_version}") {
        exclude group: "org.apache.logging.log4j", module: "log4j-core"
        exclude group: "org.apache.logging.log4j", module: "log4j-api"
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j2-impl'
        exclude group: "com.google.code.findbugs", module: "jsr305"
        exclude group: "org.jetbrains", module: "annotations"
        exclude group: "com.ibm.icu", module: "icu4j"
        exclude group: "it.unimi.dsi", module: "fastutil"
    }
    implementation fg.deobf("icyllis.modernui:ModernUI-Forge:${minecraft_version}-${modernui_forge_version}")
    implementation fg.deobf("curse.maven:timeless-and-classics-zero-1028108:6518539")
    implementation fg.deobf("curse.maven:tacz-lesraisins-tactical-equipements-1273094:6584599")
    implementation fg.deobf("maven.modrinth:counterstrikegrenade:${cs_grenade_version}")
    runtimeOnly fg.deobf("maven.modrinth:kotlin-for-forge:${kotlin_forge_version}")

    compileOnly fg.deobf("org.spigotmc:spigot-api:1.20.1-R0.1-SNAPSHOT")
    //implementation fileTree(dir: 'libs', include: '**/*.jar')
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }}
// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

// 生成源码JAR的任务
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            // 可选：自定义 groupId, artifactId 和 version
            groupId = mod_group_id
            artifactId = mod_id
            version = mod_version

            artifact sourcesJar
        }
    }
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
