buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'maven-publish'
}

apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = minecraft_version + "-" + file_version + "-" + mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
    maven {
        name 'Curse Maven'
        url "https://www.cursemaven.com"
    }
    maven {
        name 'IzzelAliz Maven'
        url 'https://maven.izzel.io/releases/'
    }
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    minecraftLibrary("icyllis.modernui:ModernUI-Core:${modernui_core_version}") {
        exclude group: "org.apache.logging.log4j", module: "log4j-core"
        exclude group: "org.apache.logging.log4j", module: "log4j-api"
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j2-impl'
        exclude group: "com.google.code.findbugs", module: "jsr305"
        exclude group: "org.jetbrains", module: "annotations"
        exclude group: "com.ibm.icu", module: "icu4j"
        exclude group: "it.unimi.dsi", module: "fastutil"
    }
    minecraftLibrary("icyllis.modernui:ModernUI-Markdown:${modernui_core_version}") {
        exclude group: "org.apache.logging.log4j", module: "log4j-core"
        exclude group: "org.apache.logging.log4j", module: "log4j-api"
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j2-impl'
        exclude group: "com.google.code.findbugs", module: "jsr305"
        exclude group: "org.jetbrains", module: "annotations"
        exclude group: "com.ibm.icu", module: "icu4j"
        exclude group: "it.unimi.dsi", module: "fastutil"
    }

    implementation fg.deobf("icyllis.modernui:ModernUI-Forge:${minecraft_version}-${modernui_forge_version}")
    implementation fg.deobf("maven.modrinth:timeless-and-classics-zero:${tacz_version}")
    implementation fg.deobf("curse.maven:tacz-lesraisins-tactical-equipements-1273094:6584599")
    implementation fg.deobf("com.phasetranscrystal:fpsmatch:${fpsm_version}"){
        transitive = false
    }

    implementation fg.deobf("maven.modrinth:counterstrikegrenade:${cs_grenade_version}")
    runtimeOnly fg.deobf("maven.modrinth:kotlin-for-forge:${kotlin_forge_version}")
    implementation fg.deobf("maven.modrinth:hit-indication:${hit_indication_version}")
    implementation fg.deobf("maven.modrinth:physicsmod:${physicsmod_version}")
    implementation fg.deobf("maven.modrinth:gd656killicon:${gd656killicon_version}")
    runtimeOnly fg.deobf("maven.modrinth:jade:${jade_version}")


    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                             forge_version       : forge_version, forge_version_range: forge_version_range,
                             loader_version_range: loader_version_range,
                             fpsm_version_range: fpsm_version_range,
                             mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                             mod_authors         : mod_authors, mod_description: mod_description,]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            groupId = mod_group_id
            artifactId = mod_id
            version = mod_version

            artifact sourcesJar
        }
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : mod_version, // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
